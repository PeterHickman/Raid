#!/usr/bin/env ruby
# encoding: UTF-8

# Inspired by https://github.com/egoist/maid

RAIDFILE='Raidfile.md'
FILENAME='/tmp/raid_workfile'
SIGFILE='~/.raid_signatures'

signatures = {
  'bash'       => { 'shbang' => '#!/bin/sh',           'source' => 'default' },
  'sh'         => { 'shbang' => '#!/bin/sh',           'source' => 'default' },
  'ruby'       => { 'shbang' => '#!/usr/bin/env ruby', 'source' => 'default' },
  'js'         => { 'shbang' => '#!/usr/bin/env js',   'source' => 'default' },
  'javascript' => { 'shbang' => '#!/usr/bin/env js',   'source' => 'default' },
}

def update_signatures(signatures)
  s = File.expand_path(SIGFILE)

  if File.exist?(s)
    File.open(s, 'r').each do |line|
      sig, shbang = line.chomp.split(/\s+/, 2)
      signatures[sig.downcase] = { 'shbang' => shbang, 'source' => SIGFILE }
    end
  end

  signatures
end

def parse_markdown(text, signatures)
  tasks = {}
  current_task = nil
  current_source = nil
  line_number = 0

  text.split("\n").each do |line|
    line_number += 1

    line = line.chomp

    if line.index('## ') == 0
      x = line.split(/\s+/, 2).last

      x = x.downcase
      if tasks.key?(x)
        puts "We have already defined [#{x}]"
      else
        tasks[x] = { 'description' => [], 'source' => nil, 'block' => [] }
        current_task = x
        current_source = nil
      end
    elsif line.index('> ') == 0
      tasks[current_task]['description'] << line.split(/\s+/, 2).last
    elsif line.index('```') == 0
      if current_source
        current_source = nil
      else
        current_source = line[3..-1]
        if signatures.key?(current_source)
          tasks[current_task]['source'] = current_source
        else
          puts "Error: [#{current_source}] is an unrecognised source on line #{line_number}"
          exit(1)
        end
      end
    else
      if current_source
        tasks[current_task]['block'] << line
      end
    end
  end

  tasks
end

def format_blocks(tasks, signatures)
  tasks.each do |task, data|
    data['description'] = data['description'].join(' ').gsub(/\s+/, ' ')
    data['block'] = assemble(signatures[data['source']]['shbang'], data['block'])
  end
end

def assemble(shbang, lines)
  t = []
  t << shbang
  lines.each do |line|
    t << line
  end
  t.join("\n")
end

def execute(task, arguments)
  filename = "#{FILENAME}.#{Process.pid}"

  begin
    fh = File.open(filename, 'w')
    fh.puts task['block']
    fh.close

    File.chmod(0744, filename)
    system("#{filename} #{arguments.join(' ')}")
  ensure
    File.delete(filename)
  end
end

if File.exist?(RAIDFILE)
  a = open(RAIDFILE).read
else
  puts "Unable to find #{RAIDFILE}"
  exit 1
end

signatures = update_signatures(signatures)

tasks = parse_markdown(a, signatures)
format_blocks(tasks, signatures)

requested_task = ARGV.shift

requested_task = requested_task.downcase if requested_task

if requested_task.nil?
  puts "raid %-10s # %s" % ['-s', 'List all the recognised sources and shbangs']
  tasks.each do |name, data|
    puts "raid %-10s # %s" % [name, data['description']]
  end
elsif requested_task == '-s'
  puts 'Current signatures'
  puts '=================='

  keys = signatures.keys.sort

  puts "%-15s %-30s %s" % ['source', 'shbang','loaded from']
  puts "--------------- ------------------------------ ---------------"
  keys.each do |k|
    puts "%-15s %-30s %s" % [k, signatures[k]['shbang'], signatures[k]['source']]
  end
elsif tasks.key?(requested_task)
  execute(tasks[requested_task], ARGV)
else
  puts "Unknown task [#{requested_task}]"
end
